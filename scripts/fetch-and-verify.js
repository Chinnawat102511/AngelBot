// fetch-and-verify.js
// ‡∏î‡∏∂‡∏á license ‡∏à‡∏≤‡∏Å endpoint (‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢ env) -> ‡πÄ‡∏ã‡∏ü‡∏•‡∏á server/licenses -> verify ‡∏î‡πâ‡∏ß‡∏¢ verifyFile
// ‡∏ñ‡πâ‡∏≤‡∏î‡∏∂‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏à‡∏∞ fallback ‡πÑ‡∏õ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô server/licenses

import { promises as fs } from "node:fs";
import path from "node:path";
import { fileURLToPath } from "node:url";

import {
  verifyFile,
  buildStablePayload,
  stableStringify,
  calcChecksum,
  findLatestFile,
} from "./verify-local-license.js";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const LICENSE_DIR = path.resolve(__dirname, "server", "licenses");

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ endpoint ‡∏ú‡πà‡∏≤‡∏ô env ‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô:
//   set LICENSE_ENDPOINT=http://localhost:3001/api/license/latest
const ENDPOINT = process.env.LICENSE_ENDPOINT || "http://localhost:3001/api/license/latest";

async function ensureDir(p) {
  await fs.mkdir(p, { recursive: true });
}

async function saveJson(filePath, data) {
  await fs.writeFile(filePath, JSON.stringify(data, null, 2), "utf8");
}

function logResult(tag, result) {
  console.log(`\n[${tag}] file: ${result.file}`);
  console.log(`owner/plan : ${result?.payload?.owner || "-"} / ${result?.payload?.plan || "-"}`);
  console.log(`valid_until: ${result?.payload?.valid_until || "-"}`);
  console.log(`checksum   : ${result.checksumOk ? "‚úÖ OK" : "‚ùå MISMATCH"}`);
  if (typeof result.daysLeft === "number") {
    const exp = result.expiryOk ? "‚úÖ OK" : "‚ùå EXPIRED";
    const near = result.nearExpiry ? " (near expiry)" : "";
    console.log(`expiry     : ${exp}${near} ‚Äì left ~ ${result.daysLeft} day(s)`);
  }
  if (!result.ok && result.reasons?.length) {
    for (const r of result.reasons) console.log(r);
  }
}

async function fetchLatest() {
  const res = await fetch(ENDPOINT, { method: "GET" });
  if (!res.ok) throw new Error(`Fetch ${ENDPOINT} -> ${res.status} ${res.statusText}`);
  return await res.json();
}

function toFileName(payload) {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å id ‡∏´‡∏£‡∏∑‡∏≠ checksum ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥
  const id = payload?.id || "license";
  return `${id}.json`;
}

async function main() {
  await ensureDir(LICENSE_DIR);

  let fetched = null;
  try {
    console.log(`üåê fetching license from: ${ENDPOINT}`);
    fetched = await fetchLatest();

    // ‡∏ï‡∏£‡∏ß‡∏à‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ checksum ‡πÉ‡∏ô payload ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö stablePayload
    const stable = buildStablePayload(fetched);
    const wantChecksum = calcChecksum(stable);
    if (!fetched.checksum) {
      console.warn("‚ö†Ô∏è  license ‡∏à‡∏≤‡∏Å server ‡πÑ‡∏°‡πà‡∏°‡∏µ checksum ‚Äì ‡∏à‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ‡∏ï‡∏≤‡∏°‡∏™‡∏π‡∏ï‡∏£‡∏ù‡∏±‡πà‡∏á client");
      fetched.checksum = wantChecksum;
    } else if (fetched.checksum !== wantChecksum) {
      console.warn("‚ö†Ô∏è  checksum ‡∏à‡∏≤‡∏Å server ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ù‡∏±‡πà‡∏á client ‚Äì ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ç‡∏≠‡∏á server ‡πÅ‡∏ï‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô");
    }

    const filename = toFileName(fetched);
    const outFile = path.join(LICENSE_DIR, filename);
    await saveJson(outFile, fetched);

    const verified = await verifyFile(outFile, { requireChecksum: true });
    logResult("fetch-and-verify (remote)", verified);

    if (!verified.ok) {
      console.warn("‚ö†Ô∏è  remote license verify ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô ‡∏à‡∏∞‡∏•‡∏≠‡∏á fallback local ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÅ‡∏ó‡∏ô");
      const latest = await findLatestFile(LICENSE_DIR);
      if (latest) {
        const v2 = await verifyFile(latest, { requireChecksum: true });
        logResult("fallback (local-latest)", v2);
        process.exitCode = v2.ok ? 0 : 1;
      } else {
        console.error("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå local ‡πÉ‡∏´‡πâ fallback");
        process.exitCode = 1;
      }
    } else {
      process.exitCode = 0;
    }
  } catch (err) {
    console.warn(`‚ö†Ô∏è  fetch ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${err.message}`);
    console.warn("‚û°Ô∏è  ‡∏à‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå local ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÅ‡∏ó‡∏ô");
    const latest = await findLatestFile(LICENSE_DIR);
    if (latest) {
      const v2 = await verifyFile(latest, { requireChecksum: true });
      logResult("fallback (local-latest)", v2);
      process.exitCode = v2.ok ? 0 : 1;
    } else {
      console.error("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå local ‡πÉ‡∏´‡πâ fallback");
      process.exitCode = 1;
    }
  }
}

if (import.meta.main) {
  main();
}
